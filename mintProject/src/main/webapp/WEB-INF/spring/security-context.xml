<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

	<!-- <security:http:/>: springSecurityFilterChain 설정  
		● auto-config: true => filter는 default값으로 동작한다. false 일 시 anonymous, x-509, http-basic, remember-me 등을 직접 정의해주어야 함.
		● use-expressions: 스프링 표현식(spEL) 사용여부 -->
	<security:http auto-config="true" use-expressions="true">
		<!--csrf 보안 설정여부 -->
		<security:csrf disabled="true"/>  

		<!-- pattern에 정의된 경로에 대해 access 권한 지정 (filter가 감시) 
			필요에 따라 권한을 설정하며, pattern 에 지정되는 url이 호출될 시 controller로 가기 전에 인터셉트한다. ex) /admin/ 으로 시작하는 url은 ADMIN 권한이 있는 사람만 가능하게 함. 
			기능 구현 시에 번거로울 것 같아 지금은 주석처리 하였으며, 기능 구현 후 담당자가 추가해주세요. -->
		<!-- <security:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/> 
		<security:intercept-url pattern="/shop/mypage/*" access="hasRole('ROLE_USER')"/>  -->
		<security:intercept-url pattern="/shop/service/offer*" access="hasRole('ROLE_USER')"/>
		
		<!-- 로그인 
			● login-page: 로그인 전에 인증 권한이 필요한 페이지를 요청했을 시 자동으로 이동시킬 url
			● login-processing-url: loginForm 에서 submit() 으로 넘겨주는 action url. 이 url 을 타고 인증을 수행하러 간다. (Controller로 가지 않고 security 가 인터셉트함)
			● default-target-url: 인증 성공 시 디폴트로 이동하는 url (always-use-default-target="true" 일 떄)
			● authentication-failure-url: 인증 실패 시 이동하는 url 
			● username-parameter, password-parameter: loginForm 에서 name 값으로 파라미터 값 가져옴.-->
		<security:form-login login-page="/shop/member/login?status=need"
							login-processing-url="/shop/member/loginOk" 
							default-target-url="/shop/main/index"
							authentication-failure-url="/shop/member/login?status=fail"
							username-parameter="id" password-parameter="pwd"
							always-use-default-target="true"/> 
							
		<!-- 중복 로그인 
			● max-sessions: 최대 허용 가능한 세션 수 
			● expired-url: 중복 로그인 발생 시 이동 URL(처음 접속한 세션이 invalidate 되고, 다음 요청 시 invalid-session-url 으로 이동) 
			● error-if-maximum-exceeded: max-sessions 을 넘었을 때 접속한 세션을 실패 처리할 지 여부. 
				"true" == 두번째 인증을 거부, false == 첫번째 인증을 거부 -->
		<security:session-management>
			<security:concurrency-control expired-url="/shop/member/login?status=duplicated" 
										max-sessions="1"/>
		</security:session-management> 

		<!-- 로그아웃 -->
		<security:logout logout-url="/shop/member/logout"
						invalidate-session="true"
						logout-success-url="/shop/main/index"/>
						
	</security:http>
	
	<!--  secured method -->
	<security:global-method-security secured-annotations="enabled"/>
	
	<!-- authentication provider -->
	<security:authentication-manager>		
		<security:authentication-provider user-service-ref="memberAuthServiceImpl"/>
		<security:authentication-provider ref="memberAuthenticationProvider"/>
	</security:authentication-manager>
	
	<!-- authentication-provider 구현 클래스  -->
	<bean id="memberAuthServiceImpl" class="mint.member.service.MemberAuthServiceImpl"/>
	<bean id="memberAuthenticationProvider" class="mint.member.service.MemberAuthenticationProvider"/>
	
	<!-- 비밀번호 암호화 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
</beans>

<!-- * 1. Spring security References:
		 * 	1) https://sjh836.tistory.com/165
		 * 	2) https://hamait.tistory.com/325
		 * 	3) https://zgundam.tistory.com/47?category=430446
		 *  4) https://to-dy.tistory.com/86?category=720806
		 * 
	 * 2. CSRF Token References: 
	 	*  1) https://itstory.tk/entry/CSRF-%EA%B3%B5%EA%B2%A9%EC%9D%B4%EB%9E%80-%EA%B7%B8%EB%A6%AC%EA%B3%A0-CSRF-%EB%B0%A9%EC%96%B4-%EB%B0%A9%EB%B2%95
 -->