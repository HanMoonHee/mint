<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="orderSQL">

	<!-- 주문자정보 -->
	<select id="getUserData" parameterType="java.util.Map" resultType="member">
		select * from member where id=#{id}
	</select>
	
	<!-- 수량수정 -->
	<update id="updateCartCount" parameterType="java.util.Map">
		update cart set ctCount=#{ctCount} where productCode=#{productCode} and id=#{id}
	</update>
	
	<!-- 카트 및 주문상품정보 가져오기  -->
	<select id="getProductCartData" parameterType="java.util.Map" resultType="java.util.Map">
		select productCode, thumbNail, mainSubject, price, ctCount, discountRate from product
		join cart using(productCode)
		join member using(id) where id=#{id} and productCode=#{productCode}
	</select>
	
	<!-- [회원] 주문내역 ================================================================================================================ -->
	<select id="getMyOrderInfo" parameterType="String" resultType="java.util.Map">
		select orderNumber, to_char(logtime,'yyyy-MM-dd') as logtime, status, fprice from orderInfo
		where id = #{id}
		<if test="from != null">
		and logtime between to_date(#{from}, 'YYMMDDHH') and to_date(#{to}, 'YYMMDDHH') + 0.99999 
		</if>
		order  by logtime desc
	</select>
	<select id="getMyOrderProductList" parameterType="String" resultType="java.util.Map">
		select id, mainSubject, od.qty as qty, od.price as orgprice, thumbnail, 
			   od.qty*od.price*od.discountRate/100 as dcprice, 
			   od.qty*(od.price-od.price*od.discountrate/100) as price
		from   orderDetails od
		join   product using (productCode)
		join   orderInfo using (ordernumber)
		where  orderNumber = #{ordernumber}
		order by orderNumber desc
	</select>
	<select id="getMyOrderDetails" parameterType="String" resultType="java.util.Map">
		select m.name as memname, m.tel as memtel, m.email as mememail, oi.addr1 as addr1, oi.addr2 as addr2, oi.tel as tel,
			   oi.name as name, request, dprice, pointuse, pointadd, fprice, status
		from   orderInfo oi
		join   member m using (id)
		where  ordernumber = #{ordernumber}
	</select>
	
	<!-- [관리자] 주문내역 보기 ======================================================================================-->
	<select id="getOrderTotalArticle" resultType="int">
		select count(*) from orderInfo
	</select>
	
	<select id="getOrderList" parameterType="java.util.Map" resultType="orderInfo">
		select * from 
		(select rownum rn, temp.* from
		(select orderNumber, id, to_char(logtime, 'yyyy-MM-dd') as logtime, status from orderInfo  
        <if test="status != 5">
			where status = #{status}
		</if>
        
        order by orderNumber desc) temp)
		where rn between #{startNum} and #{endNum} 
		
	</select>
	
	<select id="getOrderListByDate" parameterType="java.util.Map" resultType="orderInfo">
		select orderNumber, id, to_char(logtime, 'YY/MM/DD') as logtime, status from orderInfo  
		where  logtime between to_date(#{from}, 'YYMMDD') and to_date(#{to}, 'YYMMDD') + 0.99999
		<if test="status != 5">
			and status = #{status}
		</if>
		order by orderNumber desc
	</select>
	
	<select id="getOrderView" parameterType="java.util.Map" resultType="java.util.Map">
		select id, name, tel, addr1, addr2, request, to_char(logtime, 'YY/MM/DD') as logtime, 
				fprice, dprice, pointUse, pointAdd, productcode, thumbnail, mainsubject, od.price as price, qty, od.discountRate as discountRate from orderDetails od
		left join orderInfo using (ordernumber)
		left join product using (productcode)
		where id =#{id} and orderNumber = #{orderNumber}
	</select>
	
	<update id="updateOrderStatus1" parameterType="java.util.Map">
		update orderInfo set status = status + 1 where orderNumber = #{orderNumber}
	</update>
	
	<select id="updateOrderStatus2" parameterType="java.util.Map" resultType="java.util.Map">
		select id, memLevel, status, fprice, dprice from orderDetails
		left join orderInfo using (ordernumber)
		left join member using (id)
		where orderNumber = #{orderNumber}
        group by (id, memLevel, status, fprice, dprice)
        having id = #{id}
	</select>
	
	<insert id="insertOrderInfo" parameterType="java.util.Map">
		insert into orderInfo values (
		    seq_order.nextval,
		    #{buyer_name},
		    #{id},
		    #{buyer_tel},
		    #{buyer_addr},
		    #{buyer_postcode},
		    #{request},
		    sysdate,
		    1,
		    #{fprice},
		    #{dprice},
		    #{pointuse},
		    #{pointadd}
		)
	</insert>
	
	<insert id="insertOrderDetail" parameterType="java.util.Map">
		<selectKey keyProperty="orderNumber" resultType="Long" order="BEFORE">
			select max(orderNumber) from orderInfo where id=#{id}
		</selectKey>
		
		insert into orderDetails values (
		    #{orderNumber},
		    #{productCode},
		    #{qty},
		    0,
		    #{price},
		    #{discountRate}
		)
	</insert>
	
	<update id="updateProductStock" parameterType="java.util.Map">
		update product set stock = (stock - #{qty}) where productCode=#{productCode}
	</update>
	
	<delete id="deleteCartList" parameterType="java.util.Map">
		delete from cart where id=#{id} and productCode=#{productCode}
	</delete>
	
</mapper>